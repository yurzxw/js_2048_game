{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.history = [];\n    }\n    saveState() {\n        if (!this.board) return;\n        this.history.push({\n            board: this.board.map((row)=>[\n                    ...row\n                ]),\n            score: this.score\n        });\n    }\n    moveLeft() {\n        this.saveState();\n        let hasChanged = false;\n        this.board = this.board.map((row)=>{\n            const rowWithoutZeros = row.filter((cell)=>cell !== 0);\n            for(let i = 0; i < rowWithoutZeros.length; i++)if (rowWithoutZeros[i] === rowWithoutZeros[i + 1]) {\n                rowWithoutZeros[i] *= 2;\n                rowWithoutZeros[i + 1] = 0;\n                this.score += rowWithoutZeros[i];\n                hasChanged = true;\n            }\n            const rowAfterMove = rowWithoutZeros.filter((cell)=>cell !== 0);\n            while(rowAfterMove.length < 4)rowAfterMove.push(0);\n            if (rowAfterMove.join(\"\") !== row.join(\"\")) hasChanged = true;\n            return rowAfterMove;\n        });\n        if (hasChanged) this.addRandomCell();\n    }\n    moveRight() {\n        this.saveState();\n        let hasChanged = false;\n        this.board = this.board.map((row)=>{\n            const rowWithoutZeros = row.filter((cell)=>cell !== 0);\n            for(let i = rowWithoutZeros.length - 1; i >= 0; i--)if (rowWithoutZeros[i] === rowWithoutZeros[i - 1]) {\n                rowWithoutZeros[i] *= 2;\n                rowWithoutZeros[i - 1] = 0;\n                this.score += rowWithoutZeros[i];\n                hasChanged = true;\n            }\n            const rowAfterMove = rowWithoutZeros.filter((cell)=>cell !== 0);\n            while(rowAfterMove.length < 4)rowAfterMove.unshift(0);\n            if (rowAfterMove.join(\"\") !== row.join(\"\")) hasChanged = true;\n            return rowAfterMove;\n        });\n        if (hasChanged) this.addRandomCell();\n    }\n    moveUp() {\n        this.saveState();\n        let hasChanged = false;\n        let transonatedBoard = [\n            [],\n            [],\n            [],\n            []\n        ];\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++)transonatedBoard[col][row] = this.board[row][col];\n        transonatedBoard = transonatedBoard.map((row)=>{\n            const rowWithoutZeros = row.filter((cell)=>cell !== 0);\n            for(let i = 0; i < rowWithoutZeros.length; i++)if (rowWithoutZeros[i - 1] === rowWithoutZeros[i]) {\n                rowWithoutZeros[i - 1] *= 2;\n                rowWithoutZeros[i] = 0;\n                this.score += rowWithoutZeros[i - 1];\n                hasChanged = true;\n            }\n            const rowAfterMove = rowWithoutZeros.filter((cell)=>cell !== 0);\n            while(rowAfterMove.length < 4)rowAfterMove.push(0);\n            if (rowAfterMove.join(\"\") !== row.join(\"\")) hasChanged = true;\n            return rowAfterMove;\n        });\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++)this.board[row][col] = transonatedBoard[col][row];\n        if (hasChanged) this.addRandomCell();\n    }\n    moveDown() {\n        this.saveState();\n        let hasChanged = false;\n        let transonatedBoard = [\n            [],\n            [],\n            [],\n            []\n        ];\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++)transonatedBoard[col][row] = this.board[row][col];\n        transonatedBoard = transonatedBoard.map((row)=>{\n            const rowWithoutZeros = row.filter((cell)=>cell !== 0);\n            for(let i = rowWithoutZeros.length - 1; i >= 0; i--)if (rowWithoutZeros[i] === rowWithoutZeros[i - 1]) {\n                rowWithoutZeros[i] *= 2;\n                rowWithoutZeros[i - 1] = 0;\n                this.score += rowWithoutZeros[i];\n                hasChanged = true;\n            }\n            const rowAfterMove = rowWithoutZeros.filter((cell)=>cell !== 0);\n            while(rowAfterMove.length < 4)rowAfterMove.unshift(0);\n            if (rowAfterMove.join(\"\") !== row.join(\"\")) hasChanged = true;\n            return rowAfterMove;\n        });\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++)this.board[row][col] = transonatedBoard[col][row];\n        if (hasChanged) this.addRandomCell();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board.map((row)=>[\n                ...row\n            ]);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        if (this.board.some((row)=>row.includes(2048))) return \"win\";\n        if (this.board.some((row)=>row.includes(0))) return \"playing\";\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const cell = this.board[row][col];\n            if (row < 3 && cell === this.board[row + 1][col] || col < 3 && cell === this.board[row][col + 1]) return \"playing\";\n        }\n        return \"lose\";\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.addRandomCell();\n        this.addRandomCell();\n        this.status = \"playing\";\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.start();\n    }\n    // Add your own methods here\n    addRandomCell() {\n        const emtyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emtyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emtyCells.length > 0) {\n            const randomCell = Math.floor(Math.random() * emtyCells.length);\n            const { row: row, col: col } = emtyCells[randomCell];\n            const newValue = Math.random() < 0.9 ? 2 : 4;\n            this.board[row][col] = newValue;\n        }\n    }\n    undo() {\n        if (this.history.length > 0) {\n            const lastState = this.history.pop();\n            this.board = lastState.board;\n            this.score = lastState.score;\n        } else alert(\"Undo is not available\");\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nfunction $09e991522ca7e64e$var$renderBoard() {\n    const board = $09e991522ca7e64e$var$game.getState();\n    const rows = [\n        ...document.querySelectorAll(\".field-row\")\n    ];\n    for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n        const cell = rows[row].children[col];\n        const value = board[row][col];\n        if (cell.textContent !== value && value !== 0) {\n            cell.style.animation = \"tile-pop 0.3s ease\";\n            cell.addEventListener(\"animationend\", ()=>{\n                cell.style.animation = \"\";\n            });\n        }\n        cell.style.animation = $09e991522ca7e64e$var$game.getStatus() === \"lose\" ? \"none\" : \"tile-pop 0.3s ease\";\n        cell.textContent = value === 0 ? \"\" : value;\n        cell.className = \"field-cell\";\n        if (value !== 0) cell.classList.add(`field-cell--${value}`);\n    }\n    const gameScore = document.querySelector(\".game-score\");\n    const winMessage = document.querySelector(\".message-win\");\n    gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n    const loseMessage = document.querySelector(\".message-lose\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") loseMessage.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") winMessage.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        winMessage.classList.add(\"hidden\");\n        loseMessage.classList.add(\"hidden\");\n    }\n}\nconst $09e991522ca7e64e$var$start = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nlet $09e991522ca7e64e$var$started = false;\n$09e991522ca7e64e$var$start.addEventListener(\"click\", (e)=>{\n    if (!$09e991522ca7e64e$var$started) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$started = true;\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$start.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$start.classList.remove(\"start\");\n        $09e991522ca7e64e$var$start.classList.add(\"restart\");\n        $09e991522ca7e64e$var$start.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$start.textContent = \"Restart\";\n        $09e991522ca7e64e$var$renderBoard();\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$undoSum = 0;\n        $09e991522ca7e64e$var$game.history = [];\n        if (!$09e991522ca7e64e$var$undoMessage.classList.contains(\"hidden\")) $09e991522ca7e64e$var$undoMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$renderBoard();\n    }\n});\nwindow.addEventListener(\"keydown\", (e)=>{\n    if (!$09e991522ca7e64e$var$started) return;\n    e.preventDefault();\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$renderBoard();\n});\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nlet $09e991522ca7e64e$var$startX = 0;\nlet $09e991522ca7e64e$var$startY = 0;\nlet $09e991522ca7e64e$var$endX = 0;\nlet $09e991522ca7e64e$var$endY = 0;\n$09e991522ca7e64e$var$gameField.addEventListener(\"touchstart\", (e)=>{\n    $09e991522ca7e64e$var$startX = e.touches[0].clientX;\n    $09e991522ca7e64e$var$startY = e.touches[0].clientY;\n});\n$09e991522ca7e64e$var$gameField.addEventListener(\"touchmove\", (e)=>{\n    $09e991522ca7e64e$var$endX = e.touches[0].clientX;\n    $09e991522ca7e64e$var$endY = e.touches[0].clientY;\n});\n$09e991522ca7e64e$var$gameField.addEventListener(\"touchend\", ()=>{\n    const diffX = $09e991522ca7e64e$var$endX - $09e991522ca7e64e$var$startX;\n    const diffY = $09e991522ca7e64e$var$endY - $09e991522ca7e64e$var$startY;\n    if (Math.abs(diffX) > Math.abs(diffY)) {\n        if (diffX > 30) $09e991522ca7e64e$var$handleSwipe(\"right\");\n        else if (diffX < -30) $09e991522ca7e64e$var$handleSwipe(\"left\");\n    } else {\n        if (diffY > 30) $09e991522ca7e64e$var$handleSwipe(\"down\");\n        else if (diffY < -30) $09e991522ca7e64e$var$handleSwipe(\"up\");\n    }\n    $09e991522ca7e64e$var$startX = 0;\n    $09e991522ca7e64e$var$startY = 0;\n    $09e991522ca7e64e$var$endX = 0;\n    $09e991522ca7e64e$var$endY = 0;\n});\nfunction $09e991522ca7e64e$var$handleSwipe(direction) {\n    switch(direction){\n        case \"up\":\n            $09e991522ca7e64e$var$game.moveUp();\n            $09e991522ca7e64e$var$renderBoard();\n            break;\n        case \"down\":\n            $09e991522ca7e64e$var$game.moveDown();\n            $09e991522ca7e64e$var$renderBoard();\n            break;\n        case \"left\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            $09e991522ca7e64e$var$renderBoard();\n            break;\n        case \"right\":\n            $09e991522ca7e64e$var$game.moveRight();\n            $09e991522ca7e64e$var$renderBoard();\n            break;\n    }\n}\nlet $09e991522ca7e64e$var$undoSum = 0;\nconst $09e991522ca7e64e$var$undoMessage = document.querySelector(\".message-undo\");\nconst $09e991522ca7e64e$var$undo = document.querySelector(\".undo\");\n$09e991522ca7e64e$var$undo.addEventListener(\"click\", (e)=>{\n    $09e991522ca7e64e$var$undoSum++;\n    if ($09e991522ca7e64e$var$undoSum < 4) {\n        $09e991522ca7e64e$var$game.undo();\n        $09e991522ca7e64e$var$renderBoard();\n    } else {\n        $09e991522ca7e64e$var$undoMessage.classList.remove(\"hidden\");\n        setTimeout(()=>{\n            $09e991522ca7e64e$var$undoMessage.classList.add(\"hidden\");\n        }, 5000);\n    }\n});\n\n\n//# sourceMappingURL=index.599c28eb.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nfunction renderBoard() {\n  const board = game.getState();\n  const rows = [...document.querySelectorAll('.field-row')];\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      const cell = rows[row].children[col];\n      const value = board[row][col];\n\n      if (cell.textContent !== value && value !== 0) {\n        cell.style.animation = 'tile-pop 0.3s ease';\n\n        cell.addEventListener('animationend', () => {\n          cell.style.animation = '';\n        });\n      }\n\n      cell.style.animation =\n        game.getStatus() === 'lose' ? 'none' : 'tile-pop 0.3s ease';\n\n      cell.textContent = value === 0 ? '' : value;\n\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n    }\n  }\n\n  const gameScore = document.querySelector('.game-score');\n  const winMessage = document.querySelector('.message-win');\n\n  gameScore.textContent = game.getScore();\n\n  const loseMessage = document.querySelector('.message-lose');\n\n  if (game.getStatus() === 'lose') {\n    loseMessage.classList.remove('hidden');\n  }\n\n  if (game.getStatus() === 'win') {\n    winMessage.classList.remove('hidden');\n  }\n\n  if (game.getStatus() === 'playing') {\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n  }\n}\n\nconst start = document.querySelector('.button');\nconst startMessage = document.querySelector('.message-start');\nlet started = false;\n\nstart.addEventListener('click', (e) => {\n  if (!started) {\n    game.start();\n    started = true;\n    startMessage.classList.add('hidden');\n    start.classList.add('hidden');\n    start.classList.remove('start');\n    start.classList.add('restart');\n    start.classList.remove('hidden');\n    start.textContent = 'Restart';\n\n    renderBoard();\n  } else {\n    game.restart();\n    undoSum = 0;\n    game.history = [];\n\n    if (!undoMessage.classList.contains('hidden')) {\n      undoMessage.classList.add('hidden');\n    }\n    renderBoard();\n  }\n});\n\nwindow.addEventListener('keydown', (e) => {\n  if (!started) {\n    return;\n  }\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n\n    default:\n      return;\n  }\n  renderBoard();\n});\n\nconst gameField = document.querySelector('.game-field');\nlet startX = 0;\nlet startY = 0;\nlet endX = 0;\nlet endY = 0;\n\ngameField.addEventListener('touchstart', (e) => {\n  startX = e.touches[0].clientX;\n  startY = e.touches[0].clientY;\n});\n\ngameField.addEventListener('touchmove', (e) => {\n  endX = e.touches[0].clientX;\n  endY = e.touches[0].clientY;\n});\n\ngameField.addEventListener('touchend', () => {\n  const diffX = endX - startX;\n  const diffY = endY - startY;\n\n  if (Math.abs(diffX) > Math.abs(diffY)) {\n    if (diffX > 30) {\n      handleSwipe('right');\n    } else if (diffX < -30) {\n      handleSwipe('left');\n    }\n  } else {\n    if (diffY > 30) {\n      handleSwipe('down');\n    } else if (diffY < -30) {\n      handleSwipe('up');\n    }\n  }\n  startX = 0;\n  startY = 0;\n  endX = 0;\n  endY = 0;\n});\n\nfunction handleSwipe(direction) {\n  switch (direction) {\n    case 'up':\n      game.moveUp();\n      renderBoard();\n      break;\n    case 'down':\n      game.moveDown();\n      renderBoard();\n\n      break;\n    case 'left':\n      game.moveLeft();\n      renderBoard();\n\n      break;\n    case 'right':\n      game.moveRight();\n      renderBoard();\n\n      break;\n  }\n}\n\nlet undoSum = 0;\nconst undoMessage = document.querySelector('.message-undo');\n\nconst undo = document.querySelector('.undo');\n\nundo.addEventListener('click', (e) => {\n  undoSum++;\n\n  if (undoSum < 4) {\n    game.undo();\n    renderBoard();\n  } else {\n    undoMessage.classList.remove('hidden');\n\n    setTimeout(() => {\n      undoMessage.classList.add('hidden');\n    }, 5000);\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.history = [];\n  }\n  saveState() {\n    if (!this.board) {\n      return;\n    }\n\n    this.history.push({\n      board: this.board.map((row) => [...row]),\n      score: this.score,\n    });\n  }\n\n  moveLeft() {\n    this.saveState();\n\n    let hasChanged = false;\n\n    this.board = this.board.map((row) => {\n      const rowWithoutZeros = row.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < rowWithoutZeros.length; i++) {\n        if (rowWithoutZeros[i] === rowWithoutZeros[i + 1]) {\n          rowWithoutZeros[i] *= 2;\n          rowWithoutZeros[i + 1] = 0;\n          this.score += rowWithoutZeros[i];\n          hasChanged = true;\n        }\n      }\n\n      const rowAfterMove = rowWithoutZeros.filter((cell) => cell !== 0);\n\n      while (rowAfterMove.length < 4) {\n        rowAfterMove.push(0);\n      }\n\n      if (rowAfterMove.join('') !== row.join('')) {\n        hasChanged = true;\n      }\n\n      return rowAfterMove;\n    });\n\n    if (hasChanged) {\n      this.addRandomCell();\n    }\n  }\n  moveRight() {\n    this.saveState();\n\n    let hasChanged = false;\n\n    this.board = this.board.map((row) => {\n      const rowWithoutZeros = row.filter((cell) => cell !== 0);\n\n      for (let i = rowWithoutZeros.length - 1; i >= 0; i--) {\n        if (rowWithoutZeros[i] === rowWithoutZeros[i - 1]) {\n          rowWithoutZeros[i] *= 2;\n          rowWithoutZeros[i - 1] = 0;\n          this.score += rowWithoutZeros[i];\n          hasChanged = true;\n        }\n      }\n\n      const rowAfterMove = rowWithoutZeros.filter((cell) => cell !== 0);\n\n      while (rowAfterMove.length < 4) {\n        rowAfterMove.unshift(0);\n      }\n\n      if (rowAfterMove.join('') !== row.join('')) {\n        hasChanged = true;\n      }\n\n      return rowAfterMove;\n    });\n\n    if (hasChanged) {\n      this.addRandomCell();\n    }\n  }\n  moveUp() {\n    this.saveState();\n\n    let hasChanged = false;\n    let transonatedBoard = [[], [], [], []];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        transonatedBoard[col][row] = this.board[row][col];\n      }\n    }\n\n    transonatedBoard = transonatedBoard.map((row) => {\n      const rowWithoutZeros = row.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < rowWithoutZeros.length; i++) {\n        if (rowWithoutZeros[i - 1] === rowWithoutZeros[i]) {\n          rowWithoutZeros[i - 1] *= 2;\n          rowWithoutZeros[i] = 0;\n          this.score += rowWithoutZeros[i - 1];\n          hasChanged = true;\n        }\n      }\n\n      const rowAfterMove = rowWithoutZeros.filter((cell) => cell !== 0);\n\n      while (rowAfterMove.length < 4) {\n        rowAfterMove.push(0);\n      }\n\n      if (rowAfterMove.join('') !== row.join('')) {\n        hasChanged = true;\n      }\n\n      return rowAfterMove;\n    });\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        this.board[row][col] = transonatedBoard[col][row];\n      }\n    }\n\n    if (hasChanged) {\n      this.addRandomCell();\n    }\n  }\n\n  moveDown() {\n    this.saveState();\n\n    let hasChanged = false;\n    let transonatedBoard = [[], [], [], []];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        transonatedBoard[col][row] = this.board[row][col];\n      }\n    }\n\n    transonatedBoard = transonatedBoard.map((row) => {\n      const rowWithoutZeros = row.filter((cell) => cell !== 0);\n\n      for (let i = rowWithoutZeros.length - 1; i >= 0; i--) {\n        if (rowWithoutZeros[i] === rowWithoutZeros[i - 1]) {\n          rowWithoutZeros[i] *= 2;\n          rowWithoutZeros[i - 1] = 0;\n          this.score += rowWithoutZeros[i];\n          hasChanged = true;\n        }\n      }\n\n      const rowAfterMove = rowWithoutZeros.filter((cell) => cell !== 0);\n\n      while (rowAfterMove.length < 4) {\n        rowAfterMove.unshift(0);\n      }\n\n      if (rowAfterMove.join('') !== row.join('')) {\n        hasChanged = true;\n      }\n\n      return rowAfterMove;\n    });\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        this.board[row][col] = transonatedBoard[col][row];\n      }\n    }\n\n    if (hasChanged) {\n      this.addRandomCell();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.board.some((row) => row.includes(2048))) {\n      return 'win';\n    }\n\n    if (this.board.some((row) => row.includes(0))) {\n      return 'playing';\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const cell = this.board[row][col];\n\n        if (\n          (row < 3 && cell === this.board[row + 1][col]) ||\n          (col < 3 && cell === this.board[row][col + 1])\n        ) {\n          return 'playing';\n        }\n      }\n    }\n\n    return 'lose';\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    this.addRandomCell();\n    this.addRandomCell();\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.start();\n  }\n\n  // Add your own methods here\n  addRandomCell() {\n    const emtyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emtyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emtyCells.length > 0) {\n      const randomCell = Math.floor(Math.random() * emtyCells.length);\n      const { row, col } = emtyCells[randomCell];\n      const newValue = Math.random() < 0.9 ? 2 : 4;\n\n      this.board[row][col] = newValue;\n    }\n  }\n\n  undo() {\n    if (this.history.length > 0) {\n      const lastState = this.history.pop();\n\n      this.board = lastState.board;\n      this.score = lastState.score;\n    } else {\n      alert('Undo is not available');\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","score","history","saveState","push","map","row","moveLeft","hasChanged","rowWithoutZeros","filter","cell","i","length","rowAfterMove","join","addRandomCell","moveRight","unshift","moveUp","transonatedBoard","col","moveDown","getScore","getState","getStatus","some","includes","start","status","restart","emtyCells","randomCell","Math","floor","random","newValue","undo","lastState","pop","alert","$09e991522ca7e64e$var$renderBoard","rows","document","querySelectorAll","children","value","textContent","style","animation","addEventListener","className","classList","add","gameScore","querySelector","winMessage","loseMessage","remove","$09e991522ca7e64e$var$start","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$started","e","$09e991522ca7e64e$var$undoSum","$09e991522ca7e64e$var$undoMessage","contains","window","preventDefault","key","$09e991522ca7e64e$var$gameField","$09e991522ca7e64e$var$startX","$09e991522ca7e64e$var$startY","$09e991522ca7e64e$var$endX","$09e991522ca7e64e$var$endY","$09e991522ca7e64e$var$handleSwipe","direction","touches","clientX","clientY","diffX","diffY","abs","$09e991522ca7e64e$var$undo","setTimeout"],"version":3,"file":"index.599c28eb.js.map"}